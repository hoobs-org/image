#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-image                                                                                    *
 * Copyright (C) 2021 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const Program = require("commander");
const Request = require("axios");
const Chalk = require("chalk");
const Table = require("as-table");
const { join } = require("path");
const { readFileSync } = require("fs");
const { execSync } = require("child_process");
const { MongoClient } = require("mongodb");
const credentials = require("../security/credentials.json");

const image = JSON.parse(readFileSync(join(__dirname, "package.json")).toString());

function execLocal(command, options) {
    try {
        return execSync(command, options || { cwd: __dirname, stdio: "inherit" }).toString().trim();
    } catch (_error) {
        return "";
    }
}

function createRelease(title, notes, beta) {
    if (beta) {
        execLocal(`gh release create v${image.version} ${join(__dirname, "builds", `hoobs*-v${image.version}-*.*`)} -p -t '${title} ${image.version}' -n '${notes}'`, { cwd: __dirname, stdio: "inherit" });
    } else {
        execLocal(`gh release create v${image.version} ${join(__dirname, "builds", `hoobs*-v${image.version}-*.*`)} -t '${title} ${image.version}' -n '${notes}'`, { cwd: __dirname, stdio: "inherit" });
    }
}

function translatePackage(value) {
    switch (value) {
        case "hoobs-gui":
            return "gui";

        case "hoobs-cli":
            return "cli";

        case "hbs-portal":
            return "portal";

        case "helm":
            return "console";

        case "hbs-vendor":
            return "vendor";

        case "soma-connect":
            return "soma";

        default:
            return value;
    }
}

async function readPackages(branch, arch, results) {
    let packages;
    let index = -1;

    packages = (readFileSync(join(__dirname, `../repo/debian/dists/${branch}/main/binary-${arch}/Packages`)).toString() || "").split("\n");

    for (let i = 0; i < packages.length; i += 1) {
        if (packages[i].startsWith("Package:")) index = results.findIndex((record) => record.package === translatePackage(packages[i].split(":").pop().trim()));
        if (packages[i].startsWith("Version:") && index > -1) results[index][branch] = packages[i].split(":").pop().trim().replace(/-hoobs/gi, "");
    }

    packages = ((await Request.get(`https://dl.hoobs.org/debian/dists/${branch}/main/binary-${arch}/Packages?t=${new Date().getTime()}`)).data || "").split("\n");

    for (let i = 0; i < packages.length; i += 1) {
        if (packages[i].startsWith("Package:")) index = results.findIndex((record) => record.package === translatePackage(packages[i].split(":").pop().trim()));
        if (packages[i].startsWith("Version:") && index > -1 && results[index][branch] !== packages[i].split(":").pop().trim().replace(/-hoobs/gi, "")) results[index][branch] = `* ${results[index][branch]}`;
    }
}

async function readRelease(branch, results) {
    let release;
    let index = -1;

    if (branch === "stable" || branch === "edge") {
        release = (((await Request.get(`https://support.hoobs.org/api/releases/image/${branch === "edge" ? "beta" : "latest"}`)).data) || {}).results || {};
        index = results.findIndex((record) => record.package === "image");

        if (release.version && release.version !== "") results[index][branch] = release.version;

        release = (((await Request.get(`https://support.hoobs.org/api/releases/desktop/${branch === "edge" ? "beta" : "latest"}`)).data) || {}).results || {};
        index = results.findIndex((record) => record.package === "desktop");

        if (release.version && release.version !== "") results[index][branch] = release.version;
    }

    if (branch === "stable") {
        release = execLocal(`${join(__dirname, "../node_modules/.bin/yarn")} info @hoobs/sdk version`, { cwd: __dirname, stdio: "pipe" }).split("\n")[1] || "";
        index = results.findIndex((record) => record.package === "sdk");

        if (release && release !== "") results[index][branch] = release;

        release = execLocal(`${join(__dirname, "../node_modules/.bin/yarn")} info @hoobs/network version`, { cwd: __dirname, stdio: "pipe" }).split("\n")[1] || "";
        index = results.findIndex((record) => record.package === "network");

        if (release && release !== "") results[index][branch] = release;

        release = execLocal(`${join(__dirname, "../node_modules/.bin/yarn")} info @hoobs/pam version`, { cwd: __dirname, stdio: "pipe" }).split("\n")[1] || "";
        index = results.findIndex((record) => record.package === "pam");

        if (release && release !== "") results[index][branch] = release;

        release = execLocal(`${join(__dirname, "../node_modules/.bin/yarn")} info @hoobs/migration version`, { cwd: __dirname, stdio: "pipe" }).split("\n")[1] || "";
        index = results.findIndex((record) => record.package === "migration");

        if (release && release !== "") results[index][branch] = release;
    }
}

Program.version(image.version, "-v, --version", "output the current version");
Program.allowUnknownOption();

Program.command("repository <branch> [arch]>")
    .description("fetch versions from live repository")
    .action(async (branch, arch) => {
        const packages = ((await Request.get(`https://dl.hoobs.org/debian/dists/${branch || "stable"}/main/binary-${arch || "amd64"}/Packages?t=${new Date().getTime()}`)).data || "").split("\n");
        const results = [];

        for (let i = 0; i < packages.length; i += 1) {
            if (packages[i].startsWith("Package:")) results.push(packages[i].split(":").pop().trim());
            if (packages[i].startsWith("Version:")) results.push(packages[i].split(":").pop().trim());
        }

        console.log(results.join(" "));
        process.exit();
    });

Program.command("published [branch]")
    .description("fetch versions from live repository")
    .action(async (branch) => {
        const results = [
            { package: "gui", method: "apt", arch: "all" },
            { package: "desktop", arch: "amd64" },
            { package: "sdk", method: "npm", arch: "all" },
            { package: "cli", method: "apt", arch: "amd64, arm64, armhf" },
            { package: "hoobsd", method: "apt", arch: "amd64, arm64, armhf" },
            { package: "portal", method: "apt", arch: "all" },
            { package: "console", method: "apt", arch: "amd64, arm64, armhf" },
            { package: "network", method: "npm", arch: "all" },
            { package: "pam", method: "npm", arch: "amd64, arm64, armhf" },
            { package: "image", arch: "arm64, armhf" },
            { package: "vendor", method: "apt", arch: "all" },
            { package: "deconz", method: "apt", arch: "amd64, arm64, armhf" },
            { package: "hyperion", method: "apt", arch: "amd64, arm64, armhf" },
            { package: "soma", method: "apt", arch: "armhf" },
            { package: "migration", method: "npm", arch: "all" },
        ];

        if (!branch || branch === "stable") {
            await readRelease("stable", results);
            await readPackages("stable", "amd64", results);
            await readPackages("stable", "arm64", results);
            await readPackages("stable", "armhf", results);
        }

        if (!branch || branch === "edge") {
            await readRelease("edge", results);
            await readPackages("edge", "amd64", results);
            await readPackages("edge", "arm64", results);
            await readPackages("edge", "armhf", results);
        }

        if (!branch || branch === "bleeding") {
            await readPackages("bleeding", "amd64", results);
            await readPackages("bleeding", "arm64", results);
            await readPackages("bleeding", "armhf", results);
        }

        console.log("");

        console.log(Table.configure({
            title: (item) => Chalk.cyan(item),
            print: (item) => Chalk.white(item),
            delimiter: Chalk.dim(" | "),
            dash: Chalk.dim("-"),
        })(results));

        console.log("");

        process.exit();
    });

Program.command("released <branch>")
    .description("fetch the current released version")
    .action(async (branch) => {
        const release = (((await Request.get(`https://support.hoobs.org/api/releases/image/${branch === "edge" ? "beta" : "latest"}`)).data) || {}).results;

        console.log(release.version);
        process.exit();
    });

Program.command("edge")
    .description("publish hoobs desktop")
    .action(async () => {
        const client = new MongoClient(credentials.db, { useUnifiedTopology: true });

        await client.connect();

        const database = client.db("support");
        const releases = database.collection("releases");

        createRelease("HOOBS", "HOOBS image for Raspberry Pi.\n\n* Big fixes", true);

        await releases.updateMany({ application: "image", latest: true, beta: true }, { $set: { latest: false } });
        await releases.deleteMany({ application: "image", version: image.version, beta: true });

        await releases.insertOne({
            application: "image",
            version: image.version,
            published: new Date(),
            latest: true,
            download_box_armhf: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-box-v${image.version}-armhf.xz`,
            download_box_arm64: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-box-v${image.version}-arm64.xz`,
            download_armhf: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-armhf.xz`,
            download_arm64: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-arm64.xz`,
            download_darwin: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-darwin.pkg`,
            beta: true,
        });

        process.exit();
    });

Program.command("stable")
    .description("publish hoobs desktop")
    .action(async () => {
        const client = new MongoClient(credentials.db, { useUnifiedTopology: true });

        await client.connect();

        const database = client.db("support");
        const releases = database.collection("releases");

        createRelease("HOOBS", "HOOBS image for Raspberry Pi.\n\n* Big fixes", false);

        await releases.updateMany({ application: "image", latest: true, beta: false }, { $set: { latest: false } });
        await releases.deleteMany({ application: "image", version: image.version, beta: false });

        await releases.insertOne({
            application: "image",
            version: image.version,
            published: new Date(),
            latest: true,
            download_box_armhf: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-box-v${image.version}-armhf.xz`,
            download_box_arm64: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-box-v${image.version}-arm64.xz`,
            download_armhf: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-armhf.xz`,
            download_arm64: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-arm64.xz`,
            download_darwin: `https://github.com/hoobs-org/image/releases/download/v${image.version}/hoobs-v${image.version}-darwin.pkg`,
            beta: false,
        });

        const hoobsd = JSON.parse(readFileSync(join(__dirname, "../hoobsd/package.json")).toString()).version;

        await releases.updateMany({ application: "hoobsd", latest: true, beta: false }, { $set: { latest: false } });
        await releases.deleteMany({ application: "hoobsd", version: hoobsd.version, beta: false });

        await releases.insertOne({
            application: "hoobsd",
            version: hoobsd.version,
            published: new Date(),
            latest: true,
            beta: false,
        });

        process.exit();
    });

Program.parse(process.argv);
